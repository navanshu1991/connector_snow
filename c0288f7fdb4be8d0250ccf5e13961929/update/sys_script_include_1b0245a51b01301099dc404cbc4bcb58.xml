<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_hpmms_hp_daas_co.OutboundRest</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>OutboundRest</name>
        <script><![CDATA[var OutboundRest = Class.create();
OutboundRest.prototype = {

    /**
     * Constructor for the REST service
     * @param {string} restMessage 
     * @param {string} restMethod 
     * @param {string} instanceName 
     * @param {integer} timeout 
     */
    initialize: function(restMessage, restMethod, instanceName, timeout, token) {
        this.webService = new sn_ws.RESTMessageV2(restMessage, restMethod);
        this.webService.setStringParameter('instance_name', instanceName);
        this.webService.setHttpTimeout(timeout);
        this.setHeader('Content-Type', 'application/json');
        this.logger = new Logger('Outbound REST ' + restMessage + ' ' + restMethod);

        if (global.JSUtil.notNil(token)) {
            this.setHeader('Authorization', 'Bearer ' + token);
        }
    },

    /**
     * This function will be used to set the header
     * @param {string} type 
     * @param {string} value 
     */
    setHeader: function(type, value) {
        this.webService.setRequestHeader(type, value);
    },

    /**
     * Setting the request body
     * @param {object} payload 
     */
    setRequestPayload: function(payload) {
        try {
            var data = JSON.stringify(payload);
			this.logger.info('Request Payload ==> \n' + data);
            this.webService.setRequestBody(data);
        } catch (exception) {
            this.logger.error('Error in function setRequestPayload: \n' + exception);
            throw exception;
        }
    },

    /**
     * This function will set the query parameters passed as an array
     * @param {array} params 
     * @returns 
     */
    setRequestQueryParams: function(params) {
        this.logger.debug('Entering setRequestQueryParams with.. \n' + JSON.stringify(params));
        //Params must be an array of key-value pairs
        if (Array.isArray(params)) {
            for (var i = 0; i < params.length; i++) {
                if (params[i].key && params[i].value) {
                    this.logger.info('Setting Query Parameter ==> ' + params[i].key + ' : ' + params[i].value);
                    this.webService.setQueryParameter(params[i].key, params[i].value);
                }
            }
        } else {
            var errMsg = 'The parameters are not passed in Array format';
            this.logger.error(errMsg);
            throw new Error(errMsg);
        }
    },

    /**
     * This function will be used to get an access token
     * @param {string} userName 
     * @param {string} password 
     * @returns responseBody object
     */
    getResponse: function() {
        try {
            var response = this.webService.execute();
            this.logger.info('Response from Web Service => \n' + response.getBody());
            var responseBody = JSON.parse(response.getBody());
            var statusCode = response.getStatusCode();
            return {
                httpStatus: statusCode,
                body: responseBody
            };
        } catch (exception) {
            this.logger.error('Error in function getResponse: \n' + exception);
            throw exception;
        }

    },

    type: 'OutboundRest'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-06-29 13:14:34</sys_created_on>
        <sys_id>1b0245a51b01301099dc404cbc4bcb58</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>OutboundRest</sys_name>
        <sys_package display_value="HP DaaS Connector" source="x_hpmms_hp_daas_co">c0288f7fdb4be8d0250ccf5e13961929</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="HP DaaS Connector">c0288f7fdb4be8d0250ccf5e13961929</sys_scope>
        <sys_update_name>sys_script_include_1b0245a51b01301099dc404cbc4bcb58</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-07-20 13:36:49</sys_updated_on>
    </sys_script_include>
</record_update>
