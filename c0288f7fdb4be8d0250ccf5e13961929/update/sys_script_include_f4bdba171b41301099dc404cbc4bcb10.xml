<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_hpmms_hp_daas_co.Utility</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>Utility</name>
        <script><![CDATA[var Utility = Class.create();
Utility.prototype = {
    initialize: function() {
        this.logger = new Logger('Utility');
		//Attachment Configurations, for update
		this.ATTACHMENT_CONFIG = [
			'HP Case Outbound API - Send Attachment: '
		];
    },

    /**
     * Creates a copy of a GlideRecord Passed and returns it
     * This function WILL NOT INSERT
     * @param {object} GlideRecord to be copied
     * @param {array} List of field names that should be empty
     * @returns {object}
     */
    copyGlideRecord: function(glideObject, omitFields) {
        try {
            var tableName = glideObject.getTableName();

            if (!tableName) throw new Error('Table Name is not valid');

            var copyGlide = new GlideRecord(tableName);
            copyGlide.initialize();

            for (prop in glideObject) {
                if (omitFields.indexOf(prop) != -1) {
                    copyGlide.setValue(prop, '');
                } else {
                    copyGlide.setValue(prop, glideObject.getValue(prop));
                }
            }
            return copyGlide;

        } catch (exception) {
            this.logger.error('Error in copyGlideRecord => ' + exception.toString());
            throw exception;
        }
    },

    /**
     * Get attachment object from an attachment sys id
     * @param {string} sysId
     * @returns {object}
     */
    getAttachmentObject: function(sysId, attachments) {
        try {
            if (!sysId) throw new Error('No attachment to send');
            //HP API accepts attachments as an array, but for simplicity, we will only send one at a time.
            var attachmentGR = new GlideRecord('sys_attachment');
            var isPresent = attachmentGR.get(sysId);
            if (isPresent) {
                var attachmentObj = {};
                var glideSysAttachment = new GlideSysAttachment();
                var base64 = glideSysAttachment.getContentBase64(attachmentGR);
                attachmentObj.payload = base64;
                attachmentObj.fileName = attachmentGR.getValue('file_name');
                attachmentObj.contentType = attachmentGR.getValue('content_type');
                attachments.push(attachmentObj);
            }
        } catch (exception) {
            this.logger.error('Error in getAttachmentObject => ' + exception.toString());
        }
    },
	
	/**
	* Function to send attachment updates, there can be multiple outbound configuration set on the same table
	* Loop through the applicable configurations
	* @param {object} attachmentGR
	*/
	sendAttachmentUpdates: function(attachmentGR) {
		var names = this.ATTACHMENT_CONFIG;
		for (var i = 0; i < names.length; i++) {
			this.sendAttachmentUpdate(attachmentGR, names[i]);
		}
	},

    /**
     * Function to send attachment update
     * Check if there is flag enabled in the account configuration for given table
     * If the flag is enabled, ensure that record is found using HP and customer field
	 * @param {object} attachmentGR
	 * @param {string} configName 
     */
    sendAttachmentUpdate: function(attachmentGR, configName) {
        try {
            //Check if there is a Send Attachment configuration for this table
			var caseAttachmentConfig = configName + attachmentGR.getValue('table_name');
			//TBD: If there are multiple Attachment APIs then this will run in a loop
			
			var tableGR = new GlideRecord(attachmentGR.getValue('table_name'));
			tableGR.get(attachmentGR.getValue('table_sys_id'));
			tableGR.attachmentSysId = attachmentGR.getValue('sys_id');
			var outBoundIntg = new OutboundIntegration(caseAttachmentConfig, tableGR);
			if(!outBoundIntg.runCondition()) return; //No need to send attachment
			
			//Now that condition matches, we will send this attachment
			var data = outBoundIntg.generatePayload();
            if (!data) throw new Error('Error in generating payload for Send Attachment API');
            var response = outBoundIntg.invokeAPI(data);
			
			if (response.httpStatus >= 200 && response.httpStatus < 300) {
                gs.addInfoMessage('Attachment was sent to HP successfully!');
            } else {
                throw new Error(caseAttachmentConfig + ' API returned an error');
            }
			
        } catch (exception) {
            this.logger.error('Error in sendAttachmentUpdate => ' + exception.toString());
        }
    },
	
	/**
     * This function would send the attachments attached to the case in a loop to HP ServiceNow
     * The number of attachments will not exceed 3
     */
    getAttachmentArray: function(tableGR) {
        try {
			var attachments = [];
            var attachmentGR = new GlideRecord('sys_attachment');
            attachmentGR.addQuery('table_sys_id', tableGR.getValue('sys_id'));
            attachmentGR.orderByDesc('created');
            attachmentGR.setLimit(3);
            attachmentGR.query();
            while (attachmentGR.next()) {
                //Adding attachment object to the attachments array
				var attachmentObj = {};
                var glideSysAttachment = new GlideSysAttachment();
                var base64 = glideSysAttachment.getContentBase64(attachmentGR);
                attachmentObj.payload = base64;
                attachmentObj.fileName = attachmentGR.getValue('file_name');
                attachmentObj.contentType = attachmentGR.getValue('content_type');
                attachments.push(attachmentObj);
            }
        } catch (exception) {
            this.logger.error('Error in getAttachmentArray => ' + exception.toString());
            throw exception;
        }
    },
	
	/**
	* Function to check if a given update is made by HP or not
	* HP User will be updated in a property
	*/
	isHPUser: function(sysId) {
		var propVal = gs.getProperty('');
		return propVal == sysId;
	},


    type: 'Utility'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-07-05 11:37:49</sys_created_on>
        <sys_id>f4bdba171b41301099dc404cbc4bcb10</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>Utility</sys_name>
        <sys_package display_value="HP DaaS Connector" source="x_hpmms_hp_daas_co">c0288f7fdb4be8d0250ccf5e13961929</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="HP DaaS Connector">c0288f7fdb4be8d0250ccf5e13961929</sys_scope>
        <sys_update_name>sys_script_include_f4bdba171b41301099dc404cbc4bcb10</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-07-12 09:57:16</sys_updated_on>
    </sys_script_include>
</record_update>
