<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="DELETE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_hpmms_hp_daas_co.OutboundRest</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>OutboundRest</name>
        <script><![CDATA[var OutboundRest = Class.create();
OutboundRest.prototype = {

    /**
     * Constructor for the REST service
     * @param {string} restMessage 
     * @param {string} restMethod 
     * @param {string} instanceName 
     * @param {integer} timeout 
     */
    initialize: function(restMessage, restMethod, instanceName, timeout, token) {
        this.webService = new sn_ws.RESTMessageV2(restMessage, restMethod);
        this.webService.setStringParameter('instance_name', instanceName);
        this.webService.setHttpTimeout(timeout);
        this.setHeader('Content-Type', 'application/json');
        this.logger = new Logger('Outbound REST ' + restMessage + ' ' + restMethod);

        if(global.JSUtil.notNil(token)) {
            this.setHeader('Authorization', 'Bearer ' + token);
        }
    },

    /**
     * This function will be used to set the header
     * @param {string} type 
     * @param {string} value 
     */
    setHeader: function(type, value) { 
        this.webService.setRequestHeader(type, value);
    },

    /**
     * Setting the request body
     * @param {object} payload 
     */
    setRequestPayload: function(payload) {
        try{
            this.logger.info('Request Payload ==> \n' + payload);
            var data = JSON.stringify(payload);
            this.webService.setRequestBody(data);
        } catch (exception) {
            this.logger.error('Error in function setRequestPayload: \n' + exception);
            throw exception;
        }
    },

    /**
     * This function will set the query parameters passed as an array
     * @param {array} params 
     * @returns 
     */
    setRequestQueryParams: function(params) {
        this.logger.debug('Entering setRequestQueryParams with.. \n' + JSON.stringify(params));
        //Params must be an array of key-value pairs
        if(Array.isArray(params)) {
            for (var i = 0; i < params.length; i++) {
                if(params[i].key && params[i].value) {
                    this.logger.info('Setting Query Parameter ==> ' + params[i].key + ' : ' + params[i].value);
                    this.webService.setQueryParameter(params[i].key, params[i].value);
                }
            }
        } else {
            var errMsg = 'The parameters are not passed in Array format';
            this.logger.error(errMsg)
            throw new Error(errMsg);
        }
    },

    /**
     * This function will be used to get an access token
     * @param {string} userName 
     * @param {string} password 
     * @returns responseBody object
     */
    getResponse: function() {
        try {
            var response = this.webService.execute();
            this.logger.info('Response from Web Service => \n' + response.getBody());
            var responseBody = JSON.parse(response.getBody());
            return responseBody;
        } catch (exception) {
            this.logger.error('Error in function getResponse: \n' + exception);
            throw exception;
        }
        
    },

    type: 'OutboundRest'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-06-28 12:18:00</sys_created_on>
        <sys_id>329bafc91b01301099dc404cbc4bcb4c</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>OutboundRest</sys_name>
        <sys_package display_value="HP DaaS Connector" source="x_hpmms_hp_daas_co">c0288f7fdb4be8d0250ccf5e13961929</sys_package>
        <sys_policy/>
        <sys_scope display_value="HP DaaS Connector">c0288f7fdb4be8d0250ccf5e13961929</sys_scope>
        <sys_update_name>sys_script_include_329bafc91b01301099dc404cbc4bcb4c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-06-28 12:18:00</sys_updated_on>
    </sys_script_include>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="HP DaaS Connector">c0288f7fdb4be8d0250ccf5e13961929</application>
        <file_path/>
        <instance_id>f86ea8ecdbaf93c4b2e05d00cf961997</instance_id>
        <instance_name>dev66788</instance_name>
        <name>sys_script_include_329bafc91b01301099dc404cbc4bcb4c</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_hpmms_hp_daas_co.OutboundRest&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;OutboundRest&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var OutboundRest = Class.create();
OutboundRest.prototype = {

    /**
     * Constructor for the REST service
     * @param {string} restMessage 
     * @param {string} restMethod 
     * @param {string} instanceName 
     * @param {integer} timeout 
     */
    initialize: function(restMessage, restMethod, instanceName, timeout, token) {
        this.webService = new sn_ws.RESTMessageV2(restMessage, restMethod);
        this.webService.setStringParameter('instance_name', instanceName);
        this.webService.setHttpTimeout(timeout);
        this.setHeader('Content-Type', 'application/json');
        this.logger = new Logger('Outbound REST ' + restMessage + ' ' + restMethod);

        if(global.JSUtil.notNil(token)) {
            this.setHeader('Authorization', 'Bearer ' + token);
        }
    },

    /**
     * This function will be used to set the header
     * @param {string} type 
     * @param {string} value 
     */
    setHeader: function(type, value) { 
        this.webService.setRequestHeader(type, value);
    },

    /**
     * Setting the request body
     * @param {object} payload 
     */
    setRequestPayload: function(payload) {
        try{
            this.logger.info('Request Payload ==&gt; \n' + payload);
            var data = JSON.stringify(payload);
            this.webService.setRequestBody(data);
        } catch (exception) {
            this.logger.error('Error in function setRequestPayload: \n' + exception);
            throw exception;
        }
    },

    /**
     * This function will set the query parameters passed as an array
     * @param {array} params 
     * @returns 
     */
    setRequestQueryParams: function(params) {
        this.logger.debug('Entering setRequestQueryParams with.. \n' + JSON.stringify(params));
        //Params must be an array of key-value pairs
        if(Array.isArray(params)) {
            for (var i = 0; i &lt; params.length; i++) {
                if(params[i].key &amp;&amp; params[i].value) {
                    this.logger.info('Setting Query Parameter ==&gt; ' + params[i].key + ' : ' + params[i].value);
                    this.webService.setQueryParameter(params[i].key, params[i].value);
                }
            }
        } else {
            var errMsg = 'The parameters are not passed in Array format';
            this.logger.error(errMsg)
            throw new Error(errMsg);
        }
    },

    /**
     * This function will be used to get an access token
     * @param {string} userName 
     * @param {string} password 
     * @returns responseBody object
     */
    getResponse: function() {
        try {
            var response = this.webService.execute();
            this.logger.info('Response from Web Service =&gt; \n' + response.getBody());
            var responseBody = JSON.parse(response.getBody());
            return responseBody;
        } catch (exception) {
            this.logger.error('Error in function getResponse: \n' + exception);
            throw exception;
        }
        
    },

    type: 'OutboundRest'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2021-06-28 12:18:00&lt;/sys_created_on&gt;&lt;sys_id&gt;329bafc91b01301099dc404cbc4bcb4c&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_name&gt;OutboundRest&lt;/sys_name&gt;&lt;sys_package display_value="HP DaaS Connector" source="x_hpmms_hp_daas_co"&gt;c0288f7fdb4be8d0250ccf5e13961929&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="HP DaaS Connector"&gt;c0288f7fdb4be8d0250ccf5e13961929&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_329bafc91b01301099dc404cbc4bcb4c&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-06-28 12:18:00&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-1368368641</payload_hash>
        <record_name>OutboundRest</record_name>
        <reverted_from/>
        <source>93db4fff07c320105b77ff4c7c1ed0b9</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-06-28 12:18:00</sys_created_on>
        <sys_id>729b67051b41301099dc404cbc4bcb61</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>17a528e14620000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-06-28 12:18:00</sys_updated_on>
        <type>Script Include</type>
        <update_guid>ba9b6705fb41301012179806bae3f460</update_guid>
        <update_guid_history>ba9b6705fb41301012179806bae3f460:-1368368641</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-06-29 13:03:40</sys_created_on>
        <sys_db_object display_value="" name="sys_script_include">sys_script_include</sys_db_object>
        <sys_id>1f1b6ee457e64d60a7ae947f672cc400</sys_id>
        <sys_metadata>329bafc91b01301099dc404cbc4bcb4c</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>OutboundRest</sys_name>
        <sys_package display_value="HP DaaS Connector" source="x_hpmms_hp_daas_co">c0288f7fdb4be8d0250ccf5e13961929</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="HP DaaS Connector">c0288f7fdb4be8d0250ccf5e13961929</sys_scope>
        <sys_scope_delete display_value="">5d875586c98148cab39ce3dbb76b5184</sys_scope_delete>
        <sys_update_name>sys_script_include_329bafc91b01301099dc404cbc4bcb4c</sys_update_name>
        <sys_update_version display_value="sys_script_include_329bafc91b01301099dc404cbc4bcb4c">729b67051b41301099dc404cbc4bcb61</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-06-29 13:03:40</sys_updated_on>
    </sys_metadata_delete>
</record_update>
