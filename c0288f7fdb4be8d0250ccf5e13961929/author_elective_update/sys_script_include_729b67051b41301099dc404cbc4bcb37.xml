<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="DELETE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_hpmms_hp_daas_co.InboundHPCase</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>InboundHPCase</name>
        <script><![CDATA[var InboundHPCase = Class.create();
InboundHPCase.prototype = {
    initialize: function (responseType, data) {
        this.responseType = responseType;
        this.data = data;

        this.tableGR = new GlideRecord('x_hpmms_hp_daas_co_hp_case_inbound');
        this.tableGR.initialize();
        this.tableGR.setValue('type', this.responseType);

        this.logger = new Logger('Inbound HP Case ' + this.responseType);
        //Logging in the incoming payload
        this.logger.info('Incoming Payload for Case => \n' + JSON.stringify(data));
    },

    processInboundData: function () {
        switch (this.responseType) {
            case 'SYNC':
                this._addSyncRecord();
                break;
            case 'UPDATE':
                this._addUpdateRecord();
                break;
            case 'ATTACHMENT':
                this._addAttachment();
                break;
            case 'REVERSE':
                this._addReverseCaseRecord()
                break;
        }
    },

    /**
     * Parent Node -> createCaseRequest
     * API Fields to be consumed
     *  incidentNumber
     *  message
     *  createdTime
     * Fields from Request
     *  customerTicketNumber
     */
    _addSyncRecord: function () {
        try {
            //Just return and do not process
            if (!this.data.createCaseRequest) return;

            var inputData = this.data.createCaseRequest;

            if (inputData.incidentNumber) this.tableGR.setValue('hp_case_number', inputData.incidentNumber);

            if (inputData.message) this.tableGR.setValue('message', inputData.message);

            if (inputData.caseCreatedTime) this.tableGR.setValue('hp_case_created', inputData.caseCreatedTime);

            if (this.data.customerTicketNumber) this.tableGR.setValue('customer_ticket_num', this.data.customerTicketNumber);

            this.tableGR.insert();

        } catch (exception) {
            this.logger.error('Error in _addSyncRecord => \n' + exception.toString());
            throw exception;
        }
    },

    /**
     * Parent Node -> caseExchange
     * API Fields to be consumed
     *  incidentNumber
     *  customerTicketNumber
     *  customerName
     *  category
     *  notes
     *  incidentStatus
     *  resolutionCode
     *  resolutionNotes
     *  closedDate
     *  partOrders {partNumber, description, expectedDeliveryDate, statusReason}
     */
    _addUpdateRecord: function () {

        try {
            //Just return and do not process
            if (!this.data.caseExchange) return;

            var inputData = this.data.caseExchange;

            if (inputData.incidentNumber) this.tableGR.setValue('hp_case_number', inputData.incidentNumber);

            if (inputData.customerTicketNumber) this.tableGR.setValue('customer_ticket_num', inputData.customerTicketNumber);

            if (inputData.customerName) this.tableGR.setValue('hp_account', inputData.customerName);

            if (inputData.category) this.tableGR.setValue('category', inputData.category);

            if (inputData.notes) this.tableGR.setValue('user_notes', inputData.notes); //TODO: To add technician_notes, maybe later

            if (inputData.incidentStatus) this.tableGR.setValue('case_status', inputData.incidentStatus);

            if (inputData.resolutionCode) this.tableGR.setValue('resolution_code', inputData.resolutionCode);

            if (inputData.resolutionNotes) this.tableGR.setValue('resolution_notes', inputData.resolutionNotes);

            if (inputData.closedDate) this.tableGR.setValue('closed_date', inputData.closedDate);

            if (inputData.partOrders) {
                for (var i = 0; i < inputData.partOrders.length; i++) {
                    //Create New Records, for Part orders
                    this._addPartOrderRecord(inputData.partOrders[i], inputData.incidentNumber, inputData.customerTicketNumber);
                }
            }
            this.tableGR.insert();

        } catch (exception) {
            this.logger.error('Error in _addUpdateRecord => \n' + exception.toString());
            throw exception;
        }
    },

    /**
     * This function is an exception as here we will create a new record for each part order
     * @param {object} part 
     * @param {string} incidentNumber 
     * @param {string} customerTicketNumber 
     */
    _addPartOrderRecord: function (part, incidentNumber, customerTicketNumber) {
        try {
            var inboundGR = new new GlideRecord('x_hpmms_hp_daas_co_hp_case_inbound');
            inboundGR.initialize();

            inboundGR.setValue('type', 'PARTORDER');
            if (incidentNumber) inboundGR.setValue('hp_case_number', incidentNumber);
            if (customerTicketNumber) inboundGR.setValue('customer_ticket_num', customerTicketNumber);

            if (part.partNumber) inboundGR.setValue('part_number', part.partNumber);

            if (part.description) inboundGR.setValue('part_description', part.description);

            if (part.expectedDeliveryDate) inboundGR.setValue('part_expected_delv_date', part.expectedDeliveryDate);

            if (part.statusReason) inboundGR.setValue('part_status_reason', part.statusReason);

            inboundGR.insert();
        } catch (exception) {
            this.logger.error('Error in _addPartOrderRecord => \n' + exception.toString());
            throw exception;
        }
    },

    /**
     * This function will add an attachment to the table specified in the attachment configuration for this Inbound Table
     * The attachment configuration must have a way to locate a customer table reord using the HP Case ID and Customer Ticket Number
     * Parent Node -> caseExchange
     * API Fields to be consumed
     *  incidentNumber
     *  customerTicketNumber
     *  customerName
     *  attachment: {name, type, base64}
     */
    _addAttachment: function () {
        try {
            //Just return and do not process
            if (!this.data.caseExchange) return;
            var inputData = this.data.caseExchange;

            if (!inputData.customerName || !inputData.customerTicketNumber || !inputData.attachment) return;
            if (!inputData.attachment.name || !inputData.attachment.type || !inputData.attachment.base64) return;

            var customerName = inputData.customerName;
            //Search in the attachment table,
            var attachmentGR = new GlideRecord('x_hpmms_hp_daas_co_attachment_configuration');
            attachmentGR.addEncodedQuery('hp_account.name=' + customerName);
            attachmentGR.query();
            if (attachmentGR.next()) {
                //Allow attachments, 
                //Get the table name
                var tableName = attachmentGR.getValue('table_name');
                //Find the ticket in the table
                var fieldName = attachmentGR.getValue('cust_tic_num_field');
                var tableGR = new GlideRecord(tableName);
                var isPresent = tableGR.get(fieldName, inputData.customerTicketNumber);
                if(isPresent) {
                    //Upload the attachment Base64 String here
                    var glideAttachment = new GlideSysAttachment();
                    glideAttachment.writeBase64(tableGR, inputData.attachment.name, inputData.attachment.type, inputData.attachment.base64);
                }
            }
        } catch (exception) {
            this.logger.error('Error in _addAttachment => \n' + exception.toString());
            throw exception;
        }
    },

    /**
     * Parent Node -> caseExchange
     * API Fields to be consumed
     *  incidentNumber
     *  customerTicketNumber
     *  customerName
     *  category
     *  notes
     *  incidentStatus
     *  serialNumber
     *  shortDescription
     *  description
     *  created
     *  contactFirstName
     *  contactLastName
     *  contactEmail
     *  contactPhone
     *  altContactFirstName
     *  altContactLastName
     *  altContactEmail
     *  altContactPhone
     *  street
     *  city
     *  state
     *  country
     *  zip
     * The key field here that determines whether it is a reverse case or not, is created
     */
    _addReverseCaseRecord: function () {
        try {
            //Just return and do not process
            if (!this.data.caseExchange) return;

            var inputData = this.data.caseExchange;

            if (inputData.incidentNumber) this.tableGR.setValue('hp_case_number', inputData.incidentNumber);

            if (inputData.customerTicketNumber) this.tableGR.setValue('customer_ticket_num', inputData.customerTicketNumber);

            if (inputData.customerName) this.tableGR.setValue('hp_account', inputData.customerName);

            if (inputData.category) this.tableGR.setValue('category', inputData.category);

            if (inputData.notes) this.tableGR.setValue('user_notes', inputData.notes); //TODO: To add technician_notes, maybe later

            if (inputData.incidentStatus) this.tableGR.setValue('case_status', inputData.incidentStatus);

            if (inputData.serialNumber) this.tableGR.setValue('serial_number', inputData.serialNumber);

            if (inputData.shortDescription) this.tableGR.setValue('short_description', inputData.shortDescription);

            if (inputData.description) this.tableGR.setValue('description', inputData.description);

            if (inputData.created) this.tableGR.setValue('created_on', inputData.created);

            if (inputData.contactFirstName) this.tableGR.setValue('contact_first_name', inputData.contactFirstName);

            if (inputData.contactLastName) this.tableGR.setValue('contact_last_name', inputData.contactLastName);

            if (inputData.contactEmail) this.tableGR.setValue('contact_email', inputData.contactEmail);

            if (inputData.contactPhone) this.tableGR.setValue('contact_phone', inputData.contactPhone);

            if (inputData.altContactFirstName) this.tableGR.setValue('alt_contact_first_name', inputData.altContactFirstName);

            if (inputData.altContactLastName) this.tableGR.setValue('alt_contact_last_name', inputData.altContactLastName);

            if (inputData.altContactEmail) this.tableGR.setValue('alt_contact_email', inputData.altContactEmail);

            if (inputData.altContactPhone) this.tableGR.setValue('alt_contact_phone', inputData.altContactPhone);

            if (inputData.street) this.tableGR.setValue('street', inputData.street);

            if (inputData.city) this.tableGR.setValue('city', inputData.city);

            if (inputData.state) this.tableGR.setValue('state', inputData.state);

            if (inputData.country) this.tableGR.setValue('country', inputData.country);

            if (inputData.zip) this.tableGR.setValue('zip', inputData.zip);

            this.tableGR.insert();

        } catch (exception) {
            this.logger.error('Error in _addReverseCaseRecord => \n' + exception.toString());
            throw exception;
        }
    },

    type: 'InboundHPCase'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-06-28 12:18:01</sys_created_on>
        <sys_id>729b67051b41301099dc404cbc4bcb37</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>InboundHPCase</sys_name>
        <sys_package display_value="HP DaaS Connector" source="x_hpmms_hp_daas_co">c0288f7fdb4be8d0250ccf5e13961929</sys_package>
        <sys_policy/>
        <sys_scope display_value="HP DaaS Connector">c0288f7fdb4be8d0250ccf5e13961929</sys_scope>
        <sys_update_name>sys_script_include_729b67051b41301099dc404cbc4bcb37</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-06-29 12:57:38</sys_updated_on>
    </sys_script_include>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="HP DaaS Connector">c0288f7fdb4be8d0250ccf5e13961929</application>
        <file_path/>
        <instance_id>f86ea8ecdbaf93c4b2e05d00cf961997</instance_id>
        <instance_name>dev66788</instance_name>
        <name>sys_script_include_729b67051b41301099dc404cbc4bcb37</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_hpmms_hp_daas_co.InboundHPCase&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;InboundHPCase&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var InboundHPCase = Class.create();
InboundHPCase.prototype = {
    initialize: function (responseType, data) {
        this.responseType = responseType;
        this.data = data;

        this.tableGR = new GlideRecord('x_hpmms_hp_daas_co_hp_case_inbound');
        this.tableGR.initialize();
        this.tableGR.setValue('type', this.responseType);

        this.logger = new Logger('Inbound HP Case ' + this.responseType);
        //Logging in the incoming payload
        this.logger.info('Incoming Payload for Case =&gt; \n' + JSON.stringify(data));
    },

    processInboundData: function () {
        switch (this.responseType) {
            case 'SYNC':
                this._addSyncRecord();
                break;
            case 'UPDATE':
                this._addUpdateRecord();
                break;
            case 'ATTACHMENT':
                this._addAttachment();
                break;
            case 'REVERSE':
                this._addReverseCaseRecord()
                break;
        }
    },

    /**
     * Parent Node -&gt; createCaseRequest
     * API Fields to be consumed
     *  incidentNumber
     *  message
     *  createdTime
     * Fields from Request
     *  customerTicketNumber
     */
    _addSyncRecord: function () {
        try {
            //Just return and do not process
            if (!this.data.createCaseRequest) return;

            var inputData = this.data.createCaseRequest;

            if (inputData.incidentNumber) this.tableGR.setValue('hp_case_number', inputData.incidentNumber);

            if (inputData.message) this.tableGR.setValue('message', inputData.message);

            if (inputData.caseCreatedTime) this.tableGR.setValue('hp_case_created', inputData.caseCreatedTime);

            if (this.data.customerTicketNumber) this.tableGR.setValue('customer_ticket_num', this.data.customerTicketNumber);

            this.tableGR.insert();

        } catch (exception) {
            this.logger.error('Error in _addSyncRecord =&gt; \n' + exception.toString());
            throw exception;
        }
    },

    /**
     * Parent Node -&gt; caseExchange
     * API Fields to be consumed
     *  incidentNumber
     *  customerTicketNumber
     *  customerName
     *  category
     *  notes
     *  incidentStatus
     *  resolutionCode
     *  resolutionNotes
     *  closedDate
     *  partOrders {partNumber, description, expectedDeliveryDate, statusReason}
     */
    _addUpdateRecord: function () {

        try {
            //Just return and do not process
            if (!this.data.caseExchange) return;

            var inputData = this.data.caseExchange;

            if (inputData.incidentNumber) this.tableGR.setValue('hp_case_number', inputData.incidentNumber);

            if (inputData.customerTicketNumber) this.tableGR.setValue('customer_ticket_num', inputData.customerTicketNumber);

            if (inputData.customerName) this.tableGR.setValue('hp_account', inputData.customerName);

            if (inputData.category) this.tableGR.setValue('category', inputData.category);

            if (inputData.notes) this.tableGR.setValue('user_notes', inputData.notes); //TODO: To add technician_notes, maybe later

            if (inputData.incidentStatus) this.tableGR.setValue('case_status', inputData.incidentStatus);

            if (inputData.resolutionCode) this.tableGR.setValue('resolution_code', inputData.resolutionCode);

            if (inputData.resolutionNotes) this.tableGR.setValue('resolution_notes', inputData.resolutionNotes);

            if (inputData.closedDate) this.tableGR.setValue('closed_date', inputData.closedDate);

            if (inputData.partOrders) {
                for (var i = 0; i &lt; inputData.partOrders.length; i++) {
                    //Create New Records, for Part orders
                    this._addPartOrderRecord(inputData.partOrders[i], inputData.incidentNumber, inputData.customerTicketNumber);
                }
            }
            this.tableGR.insert();

        } catch (exception) {
            this.logger.error('Error in _addUpdateRecord =&gt; \n' + exception.toString());
            throw exception;
        }
    },

    /**
     * This function is an exception as here we will create a new record for each part order
     * @param {object} part 
     * @param {string} incidentNumber 
     * @param {string} customerTicketNumber 
     */
    _addPartOrderRecord: function (part, incidentNumber, customerTicketNumber) {
        try {
            var inboundGR = new new GlideRecord('x_hpmms_hp_daas_co_hp_case_inbound');
            inboundGR.initialize();

            inboundGR.setValue('type', 'PARTORDER');
            if (incidentNumber) inboundGR.setValue('hp_case_number', incidentNumber);
            if (customerTicketNumber) inboundGR.setValue('customer_ticket_num', customerTicketNumber);

            if (part.partNumber) inboundGR.setValue('part_number', part.partNumber);

            if (part.description) inboundGR.setValue('part_description', part.description);

            if (part.expectedDeliveryDate) inboundGR.setValue('part_expected_delv_date', part.expectedDeliveryDate);

            if (part.statusReason) inboundGR.setValue('part_status_reason', part.statusReason);

            inboundGR.insert();
        } catch (exception) {
            this.logger.error('Error in _addPartOrderRecord =&gt; \n' + exception.toString());
            throw exception;
        }
    },

    /**
     * This function will add an attachment to the table specified in the attachment configuration for this Inbound Table
     * The attachment configuration must have a way to locate a customer table reord using the HP Case ID and Customer Ticket Number
     * Parent Node -&gt; caseExchange
     * API Fields to be consumed
     *  incidentNumber
     *  customerTicketNumber
     *  customerName
     *  attachment: {name, type, base64}
     */
    _addAttachment: function () {
        try {
            //Just return and do not process
            if (!this.data.caseExchange) return;
            var inputData = this.data.caseExchange;

            if (!inputData.customerName || !inputData.customerTicketNumber || !inputData.attachment) return;
            if (!inputData.attachment.name || !inputData.attachment.type || !inputData.attachment.base64) return;

            var customerName = inputData.customerName;
            //Search in the attachment table,
            var attachmentGR = new GlideRecord('x_hpmms_hp_daas_co_attachment_configuration');
            attachmentGR.addEncodedQuery('hp_account.name=' + customerName);
            attachmentGR.query();
            if (attachmentGR.next()) {
                //Allow attachments, 
                //Get the table name
                var tableName = attachmentGR.getValue('table_name');
                //Find the ticket in the table
                var fieldName = attachmentGR.getValue('cust_tic_num_field');
                var tableGR = new GlideRecord(tableName);
                var isPresent = tableGR.get(fieldName, inputData.customerTicketNumber);
                if(isPresent) {
                    //Upload the attachment Base64 String here
                    var glideAttachment = new GlideSysAttachment();
                    glideAttachment.writeBase64(tableGR, inputData.attachment.name, inputData.attachment.type, inputData.attachment.base64);
                }
            }
        } catch (exception) {
            this.logger.error('Error in _addAttachment =&gt; \n' + exception.toString());
            throw exception;
        }
    },

    /**
     * Parent Node -&gt; caseExchange
     * API Fields to be consumed
     *  incidentNumber
     *  customerTicketNumber
     *  customerName
     *  category
     *  notes
     *  incidentStatus
     *  serialNumber
     *  shortDescription
     *  description
     *  created
     *  contactFirstName
     *  contactLastName
     *  contactEmail
     *  contactPhone
     *  altContactFirstName
     *  altContactLastName
     *  altContactEmail
     *  altContactPhone
     *  street
     *  city
     *  state
     *  country
     *  zip
     * The key field here that determines whether it is a reverse case or not, is created
     */
    _addReverseCaseRecord: function () {
        try {
            //Just return and do not process
            if (!this.data.caseExchange) return;

            var inputData = this.data.caseExchange;

            if (inputData.incidentNumber) this.tableGR.setValue('hp_case_number', inputData.incidentNumber);

            if (inputData.customerTicketNumber) this.tableGR.setValue('customer_ticket_num', inputData.customerTicketNumber);

            if (inputData.customerName) this.tableGR.setValue('hp_account', inputData.customerName);

            if (inputData.category) this.tableGR.setValue('category', inputData.category);

            if (inputData.notes) this.tableGR.setValue('user_notes', inputData.notes); //TODO: To add technician_notes, maybe later

            if (inputData.incidentStatus) this.tableGR.setValue('case_status', inputData.incidentStatus);

            if (inputData.serialNumber) this.tableGR.setValue('serial_number', inputData.serialNumber);

            if (inputData.shortDescription) this.tableGR.setValue('short_description', inputData.shortDescription);

            if (inputData.description) this.tableGR.setValue('description', inputData.description);

            if (inputData.created) this.tableGR.setValue('created_on', inputData.created);

            if (inputData.contactFirstName) this.tableGR.setValue('contact_first_name', inputData.contactFirstName);

            if (inputData.contactLastName) this.tableGR.setValue('contact_last_name', inputData.contactLastName);

            if (inputData.contactEmail) this.tableGR.setValue('contact_email', inputData.contactEmail);

            if (inputData.contactPhone) this.tableGR.setValue('contact_phone', inputData.contactPhone);

            if (inputData.altContactFirstName) this.tableGR.setValue('alt_contact_first_name', inputData.altContactFirstName);

            if (inputData.altContactLastName) this.tableGR.setValue('alt_contact_last_name', inputData.altContactLastName);

            if (inputData.altContactEmail) this.tableGR.setValue('alt_contact_email', inputData.altContactEmail);

            if (inputData.altContactPhone) this.tableGR.setValue('alt_contact_phone', inputData.altContactPhone);

            if (inputData.street) this.tableGR.setValue('street', inputData.street);

            if (inputData.city) this.tableGR.setValue('city', inputData.city);

            if (inputData.state) this.tableGR.setValue('state', inputData.state);

            if (inputData.country) this.tableGR.setValue('country', inputData.country);

            if (inputData.zip) this.tableGR.setValue('zip', inputData.zip);

            this.tableGR.insert();

        } catch (exception) {
            this.logger.error('Error in _addReverseCaseRecord =&gt; \n' + exception.toString());
            throw exception;
        }
    },

    type: 'InboundHPCase'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2021-06-28 12:18:01&lt;/sys_created_on&gt;&lt;sys_id&gt;729b67051b41301099dc404cbc4bcb37&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;InboundHPCase&lt;/sys_name&gt;&lt;sys_package display_value="HP DaaS Connector" source="x_hpmms_hp_daas_co"&gt;c0288f7fdb4be8d0250ccf5e13961929&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="HP DaaS Connector"&gt;c0288f7fdb4be8d0250ccf5e13961929&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_729b67051b41301099dc404cbc4bcb37&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-06-29 12:57:38&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-759182368</payload_hash>
        <record_name>InboundHPCase</record_name>
        <reverted_from/>
        <source>93db4fff07c320105b77ff4c7c1ed0b9</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-06-29 12:57:38</sys_created_on>
        <sys_id>894ebce11b01301099dc404cbc4bcb8b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>17a57d8b7d80000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-06-29 12:57:38</sys_updated_on>
        <type>Script Include</type>
        <update_guid>054ebce10001301015e09d27df23088b</update_guid>
        <update_guid_history>054ebce10001301015e09d27df23088b:-759182368,fe9b6705bf413010eebc493718566a84:-420799572</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete/>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-06-29 13:03:40</sys_created_on>
        <sys_db_object display_value="" name="sys_script_include">sys_script_include</sys_db_object>
        <sys_id>aac920e7fdff446c87d5b91a42d74b24</sys_id>
        <sys_metadata>729b67051b41301099dc404cbc4bcb37</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>InboundHPCase</sys_name>
        <sys_package display_value="HP DaaS Connector" source="x_hpmms_hp_daas_co">c0288f7fdb4be8d0250ccf5e13961929</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="HP DaaS Connector">c0288f7fdb4be8d0250ccf5e13961929</sys_scope>
        <sys_scope_delete display_value="">5d875586c98148cab39ce3dbb76b5184</sys_scope_delete>
        <sys_update_name>sys_script_include_729b67051b41301099dc404cbc4bcb37</sys_update_name>
        <sys_update_version display_value="sys_script_include_729b67051b41301099dc404cbc4bcb37">894ebce11b01301099dc404cbc4bcb8b</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-06-29 13:03:40</sys_updated_on>
    </sys_metadata_delete>
</record_update>
